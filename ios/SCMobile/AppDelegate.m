/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "AppDelegate.h"

#import "RCTRootView.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  NSURL *jsCodeLocation;

  /**
   * Loading JavaScript code - uncomment the one you want.
   *
   * OPTION 1
   * Load from development server. Start the server from the repository root:
   *
   * $ npm start
   *
   * To run on device, change `localhost` to the IP address of your computer
   * (you can get this by typing `ifconfig` into the terminal and selecting the
   * `inet` value under `en0:`) and make sure your computer and iOS device are
   * on the same Wi-Fi network.
   */

  jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];

  /**
   * OPTION 2
   * Load from pre-bundled file on disk. The static bundle is automatically
   * generated by the "Bundle React Native code and images" build step when
   * running the project on an actual device or running the project on the
   * simulator in the "Release" build configuration.
   */

//   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];

  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@"SCMobile"
                                               initialProperties:nil
                                                   launchOptions:launchOptions];

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  
  [self startSpatialConnect];
  
  return YES;
}

- (void)startSpatialConnect {
  if (!sc) {
    NSString *cfgPath = [SCFileUtils filePathFromMainBundle:@"tests.scfg"];
    sc = [[SpatialConnect alloc] initWithFilepath:cfgPath];
    NSURL *URL = [NSURL URLWithString:@"https://portal.opengeospatial.org"];
    
    [NSURLRequest
     .class performSelector:NSSelectorFromString(
                                                 @"setAllowsAnyHTTPSCertificate:forHost:")
     withObject:NSNull.null // Just need to pass non-nil here
     // to appear as a BOOL YES, using
     // the NSNull.null singleton is
     // pretty safe
     withObject:[URL host]];
    NSURL *URL2 = [NSURL URLWithString:@"https://s3-us-west-2.amazonaws.com"];
    
    [NSURLRequest
     .class performSelector:NSSelectorFromString(
                                                 @"setAllowsAnyHTTPSCertificate:forHost:")
     withObject:NSNull.null // Just need to pass non-nil here
     // to appear as a BOOL YES, using
     // the NSNull.null singleton is
     // pretty safe
     withObject:[URL2 host]];
    NSURL *URL3 = [NSURL URLWithString:@"https://s3.amazonaws.com"];
    
    [NSURLRequest
     .class performSelector:NSSelectorFromString(
                                                 @"setAllowsAnyHTTPSCertificate:forHost:")
     withObject:NSNull.null // Just need to pass non-nil here
     // to appear as a BOOL YES, using
     // the NSNull.null singleton is
     // pretty safe
     withObject:[URL3 host]];
    
    SCStyle *style = [[SCStyle alloc] init];
    style.fillColor = [UIColor orangeColor];
    style.fillOpacity = 0.25f;
    style.strokeColor = [UIColor yellowColor];
    style.strokeOpacity = 0.5f;
    style.strokeWidth = 2;
    
    [sc startAllServices];
    
    
  }
}

- (SpatialConnect *)spatialConnectSharedInstance {
  return sc;
}

@end
